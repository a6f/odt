//! A Parsing Expression Grammar for the Devicetree Source format.
//!
//! See https://devicetree-specification.readthedocs.io/en/stable/source-language.html.

// DIFF comments mark known differences from the grammar `dtc` accepts.
//
// `dtc` will accept any byte sequence in string and char literals, while pest
// implicitly requires UTF-8 (since it parses a Rust `str`).
//
// This grammar is not as strict as it could be.  For the sake of error
// messages on bad input, some constraints are checked at the AST level.
// For example, the exact set of characters in node/property names; `dtc`
// checks only after the tree is built, so the following produces no errors:
//   / {
//       0-9,._+*#?@;
//       0-9,._+*#?@ {};
//   };
//   / {
//       /delete-property/ 0-9,._+*#?@;
//       /delete-node/ 0-9,._+*#?@;
//   };

// Pest accepts the WHITESPACE and COMMENT rules between any other tokens
// outside an atomic rule (introduced with '@' or '$').
// We need these tokens when pretty-printing, so these rules are not silent.
WHITESPACE = @{ " " | "\t" | "\r" | "\n" }
COMMENT = ${ BlockComment | LineComment }
BlockComment = @{ "/*" ~ (BlockComment | !"*/" ~ ANY)* ~ "*/" }
// Line comments do not contain their own newline.
// DIFF: Thus one is accepted at EOF; dtc rejects this.
LineComment = @{ "//" ~ (!newline ~ ANY)* }
newline = _{ "\n" | "\r\n" }

DtsFile = { SOI ~ Dts ~ EOI }

/// Overall structure of a DTS file.
Dts = { Header* ~ Include* ~ Memreserve* ~ TopDef* }

// DIFF: dtc accepts #line directives (as emitted by cpp)

Semicolon = { ";" }
SlashBits = { "/bits/" }
SlashDeleteNode = { "/delete-node/" }
SlashDeleteProperty = { "/delete-property/" }
SlashDtsV1 = { "/dts-v1/" }
SlashIncbin = { "/incbin/" }
SlashInclude = { "/include/" }
SlashMemreserve = { "/memreserve/" }
SlashOmitIfNoRef = { "/omit-if-no-ref/" }
SlashPlugin = { "/plugin/" }

// DIFF: dtc requires a "/dts-v1/;" header but we make it optional,
//       to allow parsing included files with the same grammar.
Header = { Version ~ Plugin? }
Version = { SlashDtsV1 ~ Semicolon }
Plugin = { SlashPlugin ~ Semicolon }

// DIFF: accepts /include/ anywhere, not just at file scope
Include = ${ SlashInclude ~ IncludeWhitespace ~ QuotedString }
IncludeWhitespace = _{ WHITESPACE* }

Memreserve = { Label* ~ SlashMemreserve ~ MemreserveArg ~ MemreserveArg ~ Semicolon }
MemreserveArg = { ParenExpr | IntLiteral }

// DIFF: dtc requires the first TopDef to be an unlabeled TopNode
TopDef = { TopDelNode | TopOmitNode | TopNode }
TopDelNode = { SlashDeleteNode ~ NodeReference ~ Semicolon }
TopOmitNode = { SlashOmitIfNoRef ~ NodeReference ~ Semicolon }

TopNode = { Label* ~ TopNodeName ~ NodeBody }
TopNodeName = { ( RootNodeName | NodeReference ) }
// improve error messages by avoiding a partial parse of e.g. "/dts-v1;/" as "/"
RootNodeName = @{ "/" ~ !('A'..'Z' | 'a'..'z' | '0'..'9') }

Label = @{ LabelName ~ ":" }
LabelName = @{ labelname_head ~ labelname_rest* }
labelname_head = @{ 'A'..'Z' | "_" | 'a'..'z' }
labelname_rest = @{ 'A'..'Z' | "_" | 'a'..'z' | '0'..'9' }

NodeReference = @{ ("&" ~ LabelName) | ("&{" ~ NodePath ~ "}") }

// dtc will accept and normalize node paths such as "/x///y/".
// label-relative references such as &{label/child/subnode} also work.
NodePath = @{ nodepathchar+ }
nodepathchar = @{ nodechar | "/" }

NodeBody = { OpenNode ~ NodeContents ~ CloseNode ~ EndNode }
OpenNode = { "{" }
CloseNode = { "}" }
EndNode = { Semicolon }
NodeContents = { PropDef* ~ ChildDef* }
PropDef = { DelProp | Prop }
ChildDef = { DelNode | ChildNode }

DelNode = { DelNodeSuperfluousPrefix* ~ SlashDeleteNode ~ NodeName ~ Semicolon }
DelNodeSuperfluousPrefix = { Label | SlashOmitIfNoRef }
DelProp = { DelPropSuperfluousPrefix* ~ SlashDeleteProperty ~ PropName ~ Semicolon }
DelPropSuperfluousPrefix = { Label }

ChildNode = { ChildNodePrefix* ~ NodeName ~ NodeBody }
ChildNodePrefix = { Label | SlashOmitIfNoRef }

NodeName = @{ "\\"? ~ nodechar+ }
// dtc accepts all of these during parsing; later validation forbids some.
nodechar = @{ 'A'..'Z' | 'a'..'z' | '0'..'9' | "#" | "*" | "+" | "," | "-" | "." | "?" | "@" | "_" }

Prop = { Label* ~ PropName ~ (PropAssign ~ PropValue)? ~ Semicolon }
PropAssign = { "=" }

PropName = @{ "\\"? ~ propchar+ }
// dtc accepts all of these during parsing; later validation forbids some.
propchar = @{ 'A'..'Z' | 'a'..'z' | '0'..'9' | "#" | "*" | "+" | "," | "-" | "." | "?" | "@" | "_" }

PropValue = { LabeledValue ~ (Comma ~ LabeledValue)* }
Comma = { "," }
LabeledValue = { Label* ~ Value ~ Label* }
Value = { Cells | QuotedString | NodeReference | ByteString | Incbin }

Cells = { Bits? ~ OpenCells ~ LabelOrCell* ~ CloseCells }
Bits = { SlashBits ~ NumericLiteral }
LabelOrCell = { Label | Cell }
OpenCells = { "<" }
CloseCells = { ">" }

Cell = { NodeReference | ParenExpr | IntLiteral }

ParenExpr = { OpenParen ~ Expr ~ CloseParen }
Expr = { TernaryPrec }

// We define one rule per level of the precedence hierarchy, and consume all
// terms at that level with repetition.  This allows left-associative
// evaluation without left recursion in the grammar or auxiliary "tail" rules.

TernaryPrec = { #left = LogicalOrPrec ~ (QuestionMark ~ #mid = Expr ~ Colon ~ #right = Expr)? }
LogicalOrPrec = { #left = LogicalAndPrec ~ (#op = LogicalOr ~ #right = LogicalAndPrec)* }
LogicalAndPrec = { #left = BitwiseOrPrec ~ (#op = LogicalAnd ~ #right = BitwiseOrPrec)* }
BitwiseOrPrec = { #left = BitwiseXorPrec ~ (#op = BitwiseOr ~ #right = BitwiseXorPrec)* }
BitwiseXorPrec = { #left = BitwiseAndPrec ~ (#op = BitwiseXor ~ #right = BitwiseAndPrec)* }
BitwiseAndPrec = { #left = EqualPrec ~ (#op = BitwiseAnd ~ #right = EqualPrec)* }
EqualPrec = { #left = ComparePrec ~ (#op = EqualPrecOp ~ #right = ComparePrec)* }
ComparePrec = { #left = ShiftPrec ~ (#op = ComparePrecOp ~ #right = ShiftPrec)* }
ShiftPrec = { #left = AddPrec ~ (#op = ShiftPrecOp ~ #right = AddPrec)* }
AddPrec = { #left = MulPrec ~ (#op = AddPrecOp ~ #right = MulPrec)* }
MulPrec = { #left = UnaryPrec ~ (#op = MulPrecOp ~ #right = UnaryPrec)* }
UnaryPrec = { UnaryExpr | ParenExpr | IntLiteral }
UnaryExpr = { UnaryOp ~ UnaryPrec }

EqualPrecOp = { Equal | NotEqual }
ComparePrecOp = { LessThanOrEqual | GreaterThanOrEqual | LessThan | GreaterThan }
ShiftPrecOp = { LeftShift | RightShift }
AddPrecOp = { Add | Subtract }
MulPrecOp = { Multiply | Divide | Modulus }
UnaryOp = { LogicalNot | BitwiseNot | Negate }

OpenParen = { "(" }
CloseParen = { ")" }
QuestionMark = { "?" }
Colon = { ":" }
LogicalNot = { "!" }
BitwiseNot = { "~" }
Negate = { "-" }
Add = { "+" }
Subtract = { "-" }
Multiply = { "*" }
Divide = { "/" }
Modulus = { "%" }
LogicalAnd = { "&&" }
LogicalOr = { "||" }
BitwiseAnd = { "&" }
BitwiseOr = { "|" }
BitwiseXor = { "^" }
LeftShift = { "<<" }
RightShift = { ">>" }
LessThanOrEqual = { "<=" }
GreaterThanOrEqual = { ">=" }
LessThan = { "<" }
GreaterThan = { ">" }
Equal = { "==" }
NotEqual = { "!=" }

IntLiteral = ${ CharLiteral | NumericLiteral }

// To improve error messages, escape sequences are not fully parsed here.
// DIFF: dtc's parsing of '\\' is broken -- but only if there is a later ' in the file!
CharLiteral = @{ "'" ~ singlequotedchar* ~ "'" }
singlequotedchar = @{ !("'" | "\\") ~ ANY | "\\" ~ ANY }

NumericLiteral = @{ (HexLiteral | OctalLiteral | DecimalLiteral) ~ NumericSuffix? }
HexLiteral = @{ ^"0x" ~ ('0'..'9' | 'A'..'F' | 'a'..'f')* }
OctalLiteral = @{ "0" ~ ('0'..'7')* }
DecimalLiteral = @{ '1'..'9' ~ ('0'..'9')* }
NumericSuffix = @{ "ULL" | "LL" | "UL" | "L" | "U" }

QuotedString = @{ "\"" ~ doublequotedchar* ~ "\"" }
doublequotedchar = @{ !("\"" | "\\") ~ ANY | "\\" ~ ANY }

ByteString = { OpenSquare ~ LabelOrHexByte* ~ CloseSquare }
LabelOrHexByte = { Label | HexByte }
OpenSquare = { "[" }
CloseSquare = { "]" }
HexByte = @{ ('0'..'9' | 'A'..'F' | 'a'..'f'){2} }

Incbin = { SlashIncbin ~ OpenParen ~ IncbinArgs ~ CloseParen }
IncbinArgs = { QuotedString ~ (Comma ~ NumericLiteral)* }
